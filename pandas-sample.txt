Here are some basic examples of how to use the Pandas library in Python for common data manipulation tasks:

1. Import Pandas:

python

import pandas as pd

2. Creating a DataFrame:

You can create a DataFrame from various data sources such as lists, dictionaries, or CSV files. Here's an example using a dictionary:

python

data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [25, 30, 35, 28]
}

df = pd.DataFrame(data)

3. Reading Data from a CSV File:

You can read data from a CSV file using the read_csv function:

python

df = pd.read_csv('data.csv')

4. Viewing Data:

To view the first few rows of the DataFrame:

python

print(df.head())

5. Basic DataFrame Operations:

    Selecting columns:

python

df['Name']  # Select the 'Name' column

    Filtering rows:

python

df[df['Age'] > 30]  # Select rows where 'Age' is greater than 30

6. Descriptive Statistics:

You can get summary statistics of your data:

python

df.describe()  # Provides count, mean, std, min, max, and quartiles for numeric columns

7. Sorting Data:

Sort the DataFrame by a specific column:

python

df.sort_values(by='Age', ascending=False)  # Sort by 'Age' column in descending order

8. Grouping and Aggregating:

Group data and perform aggregation:

python

grouped = df.groupby('Age').mean()  # Calculate the mean age for each unique age

9. Adding and Modifying Data:

Adding a new column to the DataFrame:

python

df['Salary'] = [50000, 60000, 70000, 55000]

10. Handling Missing Data:

Fill missing values with a specific value or method:

python

df.fillna(0)  # Fill missing values with 0

11. Saving Data to CSV:

Save the DataFrame to a CSV file:

python

df.to_csv('new_data.csv', index=False)

These are just some basic examples of what you can do with Pandas. The library is incredibly versatile and can handle various data manipulation and analysis tasks for more complex data sets as well.
